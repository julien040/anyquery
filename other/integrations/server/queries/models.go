// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type IntegrationStatus string

const (
	IntegrationStatusPending     IntegrationStatus = "pending"
	IntegrationStatusActive      IntegrationStatus = "active"
	IntegrationStatusNeedsReauth IntegrationStatus = "needs_reauth"
	IntegrationStatusDisabled    IntegrationStatus = "disabled"
)

func (e *IntegrationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntegrationStatus(s)
	case string:
		*e = IntegrationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IntegrationStatus: %T", src)
	}
	return nil
}

type NullIntegrationStatus struct {
	IntegrationStatus IntegrationStatus
	Valid             bool // Valid is true if IntegrationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntegrationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IntegrationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntegrationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntegrationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntegrationStatus), nil
}

type Connection struct {
	Uid          string
	ConnectionID string
	Status       NullIntegrationStatus
	Error        pgtype.Text
	UpdatedAt    pgtype.Timestamptz
	CreatedAt    pgtype.Timestamptz
	Metadata     []byte
}

type Profile struct {
	ProfileID          string
	ProfileName        pgtype.Text
	ProfileDescription pgtype.Text
	UserConfig         []byte
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
	Metadata           []byte
	ConnectionID       pgtype.Text
}
